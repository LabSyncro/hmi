name: "Build and Publish"

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version number for this release"
        required: true
        default: "0.1.0"
      prerelease:
        description: "Is this a prerelease?"
        type: boolean
        default: false

jobs:
  publish-tauri:
    permissions:
      contents: write
      packages: write
    env:
      POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
      POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_MAX_CONNECTIONS: ${{ secrets.POSTGRES_MAX_CONNECTIONS || 5 }}
      VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "ubuntu-22.04"
            args: "--target aarch64-unknown-linux-gnu"
            targetName: "raspberry-pi-debian12"

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-unknown-linux-gnu

      - name: Install cross-compilation tools for Debian 12 Bookworm
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libgtk-3-dev libappindicator3-dev librsvg2-dev patchelf
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          sudo apt-get install -y qemu-user-static
          sudo apt-get install -y libxdo-dev libssl-dev file wget

          # Install ARM64 cross-compilation libraries
          sudo apt-get install -y crossbuild-essential-arm64 pkg-config
          sudo apt-get install -y libglib2.0-dev-arm64 libgtk-3-dev-arm64 libwebkit2gtk-4.1-dev-arm64 libappindicator3-dev-arm64 librsvg2-dev-arm64

          # Set environment variables for cross-compilation
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV
          echo "PKG_CONFIG_SYSROOT_DIR=/" >> $GITHUB_ENV

      - name: Set up Cargo config for cross-compilation
        run: |
          mkdir -p ~/.cargo
          echo '[target.aarch64-unknown-linux-gnu]' >> ~/.cargo/config
          echo 'linker = "aarch64-linux-gnu-gcc"' >> ~/.cargo/config
          echo 'rustflags = ["-C", "link-arg=-march=armv8-a"]' >> ~/.cargo/config

          # Create wrapper script for cross-compilation
          sudo mkdir -p /usr/lib/aarch64-linux-gnu/pkgconfig

          # Create a simple pkg-config wrapper for ARM64
          cat > /tmp/arm64-pkg-config.sh <<'EOF'
          #!/bin/bash
          export PKG_CONFIG_ALLOW_CROSS=1
          export PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig
          export PKG_CONFIG_SYSROOT_DIR=/
          /usr/bin/pkg-config "$@"
          EOF

          sudo mv /tmp/arm64-pkg-config.sh /usr/local/bin/arm64-pkg-config
          sudo chmod +x /usr/local/bin/arm64-pkg-config

          # Set environment variable
          echo "PKG_CONFIG=/usr/local/bin/arm64-pkg-config" >> $GITHUB_ENV

      - name: Install frontend dependencies
        run: bun install

      - name: Install Tauri CLI
        run: bun add -g @tauri-apps/cli

      - name: Build Tauri App for Debian 12 Bookworm
        run: |
          # Debug info
          echo "PKG_CONFIG: $PKG_CONFIG"
          echo "PKG_CONFIG_PATH: $PKG_CONFIG_PATH"
          echo "PKG_CONFIG_ALLOW_CROSS: $PKG_CONFIG_ALLOW_CROSS"

          # Build with proper env vars
          bun x tauri build ${{ matrix.args }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PKG_CONFIG_ALLOW_CROSS: 1
          PKG_CONFIG_PATH: /usr/lib/aarch64-linux-gnu/pkgconfig
          RUST_BACKTRACE: 1

      - name: Package for Raspberry Pi (Debian 12)
        run: |
          mkdir -p dist
          cp src-tauri/target/aarch64-unknown-linux-gnu/release/bundle/deb/*.deb dist/app-${{ github.event.inputs.version }}-${{ matrix.targetName }}.deb
          if [ -d "src-tauri/target/aarch64-unknown-linux-gnu/release/bundle/appimage" ]; then
            cp src-tauri/target/aarch64-unknown-linux-gnu/release/bundle/appimage/*.AppImage dist/app-${{ github.event.inputs.version }}-${{ matrix.targetName }}.AppImage
          fi

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          tag_name: v${{ github.event.inputs.version }}
          name: App v${{ github.event.inputs.version }} for Debian 12
          body: |
            Release for Raspberry Pi devices running Debian 12 (Bookworm).
            Download and install the package for your Raspberry Pi.
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image for Debian 12
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          build-args: |
            DEBIAN_VERSION=bookworm
          tags: |
            ghcr.io/${{ github.repository }}/app:latest
            ghcr.io/${{ github.repository }}/app:${{ github.event.inputs.version }}
            ghcr.io/${{ github.repository }}/app:debian12-${{ github.event.inputs.version }}
          platforms: linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
