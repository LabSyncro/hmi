name: "Build and Publish"

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version number for this release"
        required: true
        default: "0.1.0"
      prerelease:
        description: "Is this a prerelease?"
        type: boolean
        default: false

jobs:
  build-amd64:
    permissions:
      contents: write
      packages: write
    env:
      POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
      POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_MAX_CONNECTIONS: ${{ secrets.POSTGRES_MAX_CONNECTIONS || 5 }}
      VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
          cache-on-failure: true

      - name: Install Tauri dependencies for AMD64
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libxdo-dev \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Install frontend dependencies
        run: bun install

      - name: Build Tauri App for AMD64
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: v${{ github.event.inputs.version }}
          releaseName: "App v${{ github.event.inputs.version }} for Debian AMD64"
          releaseBody: "Release for Linux Debian AMD64. Download and install the package for your Debian system."
          releaseDraft: false
          prerelease: ${{ github.event.inputs.prerelease }}

      - name: Archive AMD64 build
        run: |
          mkdir -p artifacts
          cp src-tauri/target/release/hmi artifacts/hmi-amd64
          if [ -d src-tauri/target/release/bundle/deb ]; then
            cp src-tauri/target/release/bundle/deb/*.deb artifacts/
          fi
          tar -czf tauri-amd64.tar.gz artifacts/

      - name: Upload AMD64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: tauri-amd64
          path: tauri-amd64.tar.gz

  build-arm64:
    permissions:
      contents: write
      packages: write
    env:
      POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
      POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_MAX_CONNECTIONS: ${{ secrets.POSTGRES_MAX_CONNECTIONS || 5 }}
      VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install frontend dependencies and build
        run: |
          bun install
          bun run build

      - name: Create cross-compilation Dockerfile
        run: |
          cat > Dockerfile.cross << 'EOF'
          FROM rust:bookworm
          
          # Install Node.js and Bun
          RUN curl -fsSL https://bun.sh/install | bash
          ENV PATH="/root/.bun/bin:$PATH"
          
          # Add ARM64 architecture and install cross-compilation tools
          RUN dpkg --add-architecture arm64 && \
              apt-get update && \
              apt-get install -y --no-install-recommends \
                gcc-aarch64-linux-gnu \
                g++-aarch64-linux-gnu \
                libc6-dev-arm64-cross \
                build-essential \
                curl \
                wget \
                file \
                libwebkit2gtk-4.1-dev \
                libxdo-dev \
                libssl-dev:arm64 \
                libayatana-appindicator3-dev \
                librsvg2-dev && \
              rm -rf /var/lib/apt/lists/*
          
          # Install Rust target and Tauri CLI
          RUN rustup target add aarch64-unknown-linux-gnu && \
              cargo install tauri-cli
          
          # Set environment variables for cross-compilation
          ENV PKG_CONFIG_ALLOW_CROSS=1
          ENV PKG_CONFIG_PATH=""
          ENV PKG_CONFIG_LIBDIR="/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig"
          ENV PKG_CONFIG_SYSROOT_DIR="/usr/aarch64-linux-gnu"
          ENV CC_aarch64_unknown_linux_gnu="aarch64-linux-gnu-gcc"
          ENV CXX_aarch64_unknown_linux_gnu="aarch64-linux-gnu-g++"
          ENV AR_aarch64_unknown_linux_gnu="aarch64-linux-gnu-ar"
          ENV CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER="aarch64-linux-gnu-gcc"
          
          WORKDIR /project
          EOF

      - name: Build cross-compilation Docker image
        run: |
          docker build -t tauri-cross -f Dockerfile.cross .

      - name: Build Tauri App for ARM64 using Docker
        run: |
          docker run --rm \
            -v $PWD:/project \
            -v $HOME/.cargo/registry:/root/.cargo/registry \
            -v $HOME/.cargo/git:/root/.cargo/git \
            -v $PWD/src-tauri/target:/project/src-tauri/target \
            -v $PWD/node_modules:/project/node_modules \
            -e TAURI_SKIP_BUILD=true \
            -e GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}" \
            tauri-cross \
            bash -c "
              cd /project/src-tauri &&
              cargo tauri build --target aarch64-unknown-linux-gnu --verbose
            "

      - name: Archive ARM64 build
        run: |
          mkdir -p artifacts
          cp src-tauri/target/aarch64-unknown-linux-gnu/release/hmi artifacts/hmi-arm64
          if [ -d src-tauri/target/aarch64-unknown-linux-gnu/release/bundle/deb ]; then
            cp src-tauri/target/aarch64-unknown-linux-gnu/release/bundle/deb/*.deb artifacts/
          fi
          tar -czf tauri-arm64.tar.gz artifacts/

      - name: Upload ARM64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: tauri-arm64
          path: tauri-arm64.tar.gz

  docker-build:
    needs: [build-amd64, build-arm64]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Prepare Docker repo name
        run: echo "REPO_LOWERCASE=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Download AMD64 artifact
        uses: actions/download-artifact@v4
        with:
          name: tauri-amd64
          path: ./docker-artifacts/amd64

      - name: Download ARM64 artifact
        uses: actions/download-artifact@v4
        with:
          name: tauri-arm64
          path: ./docker-artifacts/arm64

      - name: Build and push multi-arch Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          build-args: |
            DEBIAN_VERSION=bookworm
            BUILDKIT_INLINE_CACHE=1
          tags: |
            ghcr.io/${{ env.REPO_LOWERCASE }}/app:latest
            ghcr.io/${{ env.REPO_LOWERCASE }}/app:${{ github.event.inputs.version }}
          cache-from: |
            type=gha
          cache-to: |
            type=gha,mode=max
