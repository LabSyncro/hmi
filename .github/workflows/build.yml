name: "Build and Publish"

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version number for this release"
        required: true
        default: "0.1.0"
      prerelease:
        description: "Is this a prerelease?"
        type: boolean
        default: false

jobs:
  publish-tauri:
    permissions:
      contents: write
      packages: write
    env:
      POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
      POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_MAX_CONNECTIONS: ${{ secrets.POSTGRES_MAX_CONNECTIONS || 5 }}
      VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Install Tauri dependencies for Debian
        run: |
          sudo apt update
          sudo apt install -y libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libxdo-dev \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Install frontend dependencies
        run: bun install

      - name: Build Tauri App for Debian
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: v${{ github.event.inputs.version }}
          releaseName: "App v${{ github.event.inputs.version }} for Debian"
          releaseBody: "Release for Linux Debian. Download and install the package for your Debian system."
          releaseDraft: false
          prerelease: ${{ github.event.inputs.prerelease }}

      - name: Package for Debian
        run: |
          mkdir -p dist
          cp src-tauri/target/release/bundle/deb/*.deb dist/app-${{ github.event.inputs.version }}-debian.deb
          if [ -d "src-tauri/target/release/bundle/appimage" ]; then
            cp src-tauri/target/release/bundle/appimage/*.AppImage dist/app-${{ github.event.inputs.version }}-debian.AppImage
          fi

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          tag_name: v${{ github.event.inputs.version }}
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Prepare Docker repo name
        run: echo "REPO_LOWERCASE=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Build and push Docker image for Debian
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          build-args: |
            DEBIAN_VERSION=bookworm
          tags: |
            ghcr.io/${{ env.REPO_LOWERCASE }}/app:latest
            ghcr.io/${{ env.REPO_LOWERCASE }}/app:${{ github.event.inputs.version }}
            ghcr.io/${{ env.REPO_LOWERCASE }}/app:debian-${{ github.event.inputs.version }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
