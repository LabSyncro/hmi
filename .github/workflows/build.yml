name: "Build and Publish"

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version number for this release"
        required: true
        default: "0.1.0"
      prerelease:
        description: "Is this a prerelease?"
        type: boolean
        default: false

jobs:
  publish-tauri:
    permissions:
      contents: write
      packages: write
    env:
      POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
      POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_MAX_CONNECTIONS: ${{ secrets.POSTGRES_MAX_CONNECTIONS || 5 }}
      VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "ubuntu-22.04"
            args: "--target aarch64-unknown-linux-gnu"
            targetName: "raspberry-pi-debian12"

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-unknown-linux-gnu

      - name: Install cross-compilation tools for Debian 12 Bookworm
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libgtk-3-dev libappindicator3-dev librsvg2-dev patchelf
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          sudo apt-get install -y qemu-user-static
          sudo apt-get install -y libxdo-dev libssl-dev file wget

          # Install standard build dependencies
          sudo apt-get install -y \
            build-essential \
            curl \
            wget \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            libappindicator3-dev \
            librsvg2-dev \
            libssl-dev \
            libxdo-dev \
            pkg-config

          # Install cross-compilation tools for ARM64
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

          # Set environment variables for cross-compilation
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV
          echo "PKG_CONFIG_SYSROOT_DIR=/" >> $GITHUB_ENV

      - name: Set up Cargo config for cross-compilation
        run: |
          mkdir -p ~/.cargo
          echo '[target.aarch64-unknown-linux-gnu]' >> ~/.cargo/config
          echo 'linker = "aarch64-linux-gnu-gcc"' >> ~/.cargo/config
          echo 'rustflags = ["-C", "link-arg=-march=armv8-a"]' >> ~/.cargo/config

          # Create simplified cross-compilation config
          mkdir -p ~/.cargo/config.d

      - name: Install frontend dependencies
        run: bun install

      - name: Install Tauri CLI
        run: bun add -g @tauri-apps/cli

      - name: Install cross for Rust cross-compilation
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Build Tauri App for Debian 12 Bookworm
        run: |
          # Create .cargo/config.d/aarch64-unknown-linux-gnu.config
          mkdir -p .cargo/config.d
          cat > .cargo/config.d/aarch64-unknown-linux-gnu.config << 'EOF'
          [target.aarch64-unknown-linux-gnu]
          linker = "aarch64-linux-gnu-gcc"
          EOF

          # Build using cross to handle ARM64 dependencies
          echo "Building for ARM64 with cross..."
          cd src-tauri

          # Modify the tauri.conf.json to use cross
          sed -i 's/"beforeBuildCommand": "bun run build"/"beforeBuildCommand": "cd .. \&\& bun run build"/' tauri.conf.json

          # Build with cross
          cross build --target aarch64-unknown-linux-gnu --release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc

      - name: Package for Raspberry Pi (Debian 12)
        run: |
          mkdir -p dist

          # Copy the binary file
          cp src-tauri/target/aarch64-unknown-linux-gnu/release/app dist/app-${{ github.event.inputs.version }}-${{ matrix.targetName }}

          # Create a simple Debian package using dpkg-deb
          mkdir -p debian/DEBIAN debian/usr/bin debian/usr/share/applications debian/usr/share/icons/hicolor/scalable/apps

          # Copy the binary
          cp src-tauri/target/aarch64-unknown-linux-gnu/release/app debian/usr/bin/

          # Create a desktop file
          cat > debian/usr/share/applications/app.desktop << EOF
          [Desktop Entry]
          Name=HMI App
          Exec=/usr/bin/app
          Icon=/usr/share/icons/hicolor/scalable/apps/app.svg
          Terminal=false
          Type=Application
          Categories=Utility;
          EOF

          # Copy icon
          cp src-tauri/icons/icon.svg debian/usr/share/icons/hicolor/scalable/apps/app.svg 2>/dev/null || echo "No icon found"

          # Create control file
          cat > debian/DEBIAN/control << EOF
          Package: hmi-app
          Version: ${{ github.event.inputs.version }}
          Section: utils
          Priority: optional
          Architecture: arm64
          Maintainer: Maintainer <maintainer@example.com>
          Description: HMI Application for Raspberry Pi
           A Tauri application built for Raspberry Pi running Debian 12 (bookworm).
          EOF

          # Build the package
          dpkg-deb --build debian dist/app-${{ github.event.inputs.version }}-${{ matrix.targetName }}.deb

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          tag_name: v${{ github.event.inputs.version }}
          name: App v${{ github.event.inputs.version }} for Debian 12
          body: |
            Release for Raspberry Pi devices running Debian 12 (Bookworm).
            Download and install the package for your Raspberry Pi.
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Prepare Docker context
        run: |
          # Create a minimal Docker context
          mkdir -p docker-build
          cp dist/app-${{ github.event.inputs.version }}-${{ matrix.targetName }} docker-build/app
          cp -r dist docker-build/

          # Create a simple Dockerfile for ARM64
          cat > docker-build/Dockerfile << EOF
          FROM debian:bookworm-slim

          # Install minimal dependencies
          RUN apt-get update && apt-get install -y \
              libwebkit2gtk-4.1-0 \
              libgtk-3-0 \
              libayatana-appindicator3-1 \
              librsvg2-2 \
              libssl3 \
              ca-certificates \
              libudev1 \
              && rm -rf /var/lib/apt/lists/*

          # Create a non-root user
          RUN useradd -ms /bin/bash appuser

          # Set working directory
          WORKDIR /app

          # Copy application
          COPY app /app/app

          # Set permissions
          RUN chmod +x /app/app && chown -R appuser:appuser /app
          USER appuser

          # Set environment variables
          ENV RUST_LOG=info

          # Add healthcheck
          HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
            CMD pgrep app > /dev/null || exit 1

          # Command to run the application
          CMD ["/app/app"]
          EOF

      - name: Build and push Docker image for Debian 12
        uses: docker/build-push-action@v5
        with:
          context: docker-build
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/app:latest
            ghcr.io/${{ github.repository }}/app:${{ github.event.inputs.version }}
            ghcr.io/${{ github.repository }}/app:debian12-${{ github.event.inputs.version }}
          platforms: linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
