name: "Build and Publish"

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version number for this release"
        required: true
        default: "0.1.0"
      prerelease:
        description: "Is this a prerelease?"
        type: boolean
        default: false

jobs:
  publish-tauri:
    permissions:
      contents: write
      packages: write
    env:
      POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
      POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_MAX_CONNECTIONS: ${{ secrets.POSTGRES_MAX_CONNECTIONS || 5 }}
      VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Add ARM64 Rust target
        run: rustup target add aarch64-unknown-linux-gnu


      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
          cache-on-failure: true

      - name: Install Tauri dependencies for Debian
        run: |
          sudo rm -f /etc/apt/sources.list.d/* /etc/apt/sources.list /etc/apt/apt-mirrors.txt
          . /etc/os-release
          CODENAME=${UBUNTU_CODENAME:-$(lsb_release -sc)}
          sudo tee /etc/apt/sources.list.d/ubuntu-amd64.list >/dev/null <<EOF
          deb [arch=amd64] http://archive.ubuntu.com/ubuntu $CODENAME main restricted universe multiverse
          deb [arch=amd64] http://archive.ubuntu.com/ubuntu $CODENAME-updates main restricted universe multiverse
          deb [arch=amd64] http://archive.ubuntu.com/ubuntu $CODENAME-backports main restricted universe multiverse
          deb [arch=amd64] http://security.ubuntu.com/ubuntu $CODENAME-security main restricted universe multiverse
          EOF
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            gir1.2-soup-3.0 \
            libsoup-3.0-dev \
            pkgconf \
            build-essential \
            curl \
            wget \
            file \
            libxdo-dev \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Install ARM64 dependencies
        run: |
          sudo dpkg --add-architecture arm64
          . /etc/os-release
          CODENAME=${UBUNTU_CODENAME:-$(lsb_release -sc)}
          sudo tee /etc/apt/sources.list.d/ubuntu-arm64.list >/dev/null <<EOF
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports $CODENAME main restricted universe multiverse
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports $CODENAME-updates main restricted universe multiverse
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports $CODENAME-backports main restricted universe multiverse
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports $CODENAME-security main restricted universe multiverse
          EOF
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            libwebkit2gtk-4.1-dev:arm64 \
            libgtk-3-dev:arm64 \
            gir1.2-soup-3.0:arm64 \
            libsoup-3.0-dev:arm64 \
            libayatana-appindicator3-dev:arm64 \
            librsvg2-dev:arm64 \
            libssl-dev:arm64 \
            libxdo-dev:arm64 \
            xz-utils

      - name: Install frontend dependencies
        run: bun install

      - name: Build Tauri App for AMD64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PKG_CONFIG_PATH: /usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig
          PKG_CONFIG_LIBDIR: /usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig
        run: |
          bun run tauri build -- --verbose

      - name: Package for Debian
        run: |
          mkdir -p dist
          ARCH=$(dpkg --print-architecture)
          cp src-tauri/target/release/bundle/deb/*.deb "dist/app-${{ github.event.inputs.version }}-debian-${ARCH}.deb"
          if [ -d src-tauri/target/release/bundle/appimage ] && [ "$ARCH" != "arm64" ]; then
            cp src-tauri/target/release/bundle/appimage/*.AppImage \
              "dist/app-${{ github.event.inputs.version }}-debian-${ARCH}.AppImage" || true
          else
            echo "Skipping AppImage packaging for ARM architecture or missing directory"
          fi

      - name: Archive AMD64 build
        run: |
          tar -czf tauri-amd64.tar.gz dist src-tauri/target/release/hmi

      - name: Upload AMD64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: tauri-amd64
          path: tauri-amd64.tar.gz

      - name: Clean build artifacts
        run: cargo clean --manifest-path src-tauri/Cargo.toml

      - name: Build Tauri App for ARM64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PKG_CONFIG_ALLOW_CROSS: '1'
          PKG_CONFIG_PATH: /usr/lib/aarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig
          PKG_CONFIG_LIBDIR: /usr/lib/aarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig
        run: |
          bun run tauri build --target aarch64-unknown-linux-gnu -- --verbose

      - name: Archive ARM64 build
        run: |
          tar -czf tauri-arm64.tar.gz dist src-tauri/target/aarch64-unknown-linux-gnu/release/hmi

      - name: Upload ARM64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: tauri-arm64
          path: tauri-arm64.tar.gz
      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          tag_name: v${{ github.event.inputs.version }}
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Prepare Docker repo name
        run: echo "REPO_LOWERCASE=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Download AMD64 artifact
        uses: actions/download-artifact@v4
        with:
          name: tauri-amd64
          path: ./docker-artifacts/amd64

      - name: Download ARM64 artifact
        uses: actions/download-artifact@v4
        with:
          name: tauri-arm64
          path: ./docker-artifacts/arm64

      - name: Build and push multi-arch Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          build-args: |
            DEBIAN_VERSION=bookworm
            BUILDKIT_INLINE_CACHE=1
          tags: |
            ghcr.io/${{ env.REPO_LOWERCASE }}/app:latest
            ghcr.io/${{ env.REPO_LOWERCASE }}/app:${{ github.event.inputs.version }}
          cache-from: |
            type=gha
          cache-to: |
            type=gha,mode=max
