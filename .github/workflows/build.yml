name: "Build and Publish"

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version number for this release"
        required: true
        default: "0.1.0"
      prerelease:
        description: "Is this a prerelease?"
        type: boolean
        default: false

jobs:
  publish-tauri:
    permissions:
      contents: write
      packages: write
    env:
      POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
      POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_MAX_CONNECTIONS: ${{ secrets.POSTGRES_MAX_CONNECTIONS || 5 }}
      VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "ubuntu-22.04"
            targetName: "raspberry-pi-debian12"

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static
          sudo apt-get install -y build-essential curl wget file
          sudo apt-get install -y patchelf
          sudo apt-get install -y dpkg-dev

      - name: Install frontend dependencies
        run: bun install

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Tauri CLI
        run: bun add --dev @tauri-apps/cli

      - name: Set up cross-compilation environment
        run: |
          # Install cross-compilation tools
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

          # Set up Cargo config for cross-compilation
          mkdir -p ~/.cargo
          cat > ~/.cargo/config.toml << EOF
          [target.aarch64-unknown-linux-gnu]
          linker = "aarch64-linux-gnu-gcc"
          rustflags = ["-C", "link-arg=-march=armv8-a"]
          EOF

      - name: Install Rust target and tools
        run: |
          # Install Rust target
          rustup target add aarch64-unknown-linux-gnu

          # Install cargo-deb for Debian package creation
          cargo install cargo-deb

      - name: Build Tauri App for ARM64
        run: |
          # Install required dependencies for Tauri
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.0-dev \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libglib2.0-dev \
            libpango1.0-dev \
            libcairo2-dev \
            libatk1.0-dev \
            libgdk-pixbuf2.0-dev

          # Set environment variables for cross-compilation
          export PKG_CONFIG_ALLOW_CROSS=1
          export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
          export RUSTFLAGS="-C link-arg=-march=armv8-a"

          # Create environment variables file for glib-sys
          mkdir -p ~/.cargo
          cat >> ~/.cargo/config.toml << EOF

          [env]
          PKG_CONFIG_ALLOW_CROSS = "1"
          PKG_CONFIG_PATH = "/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig"
          PKG_CONFIG_SYSROOT_DIR = "/"
          EOF

          # Build the frontend
          bun run build

          # Create a simplified version of the app for ARM64
          cd src-tauri

          # Create a custom pkg-config wrapper for cross-compilation
          mkdir -p .cargo
          cat > .cargo/config.toml << EOF
          [env]
          PKG_CONFIG_ALLOW_CROSS = "1"
          PKG_CONFIG_PATH = "/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig"
          PKG_CONFIG_SYSROOT_DIR = "/"
          EOF

          # Create a pkg-config wrapper script
          mkdir -p ~/bin
          cat > ~/bin/aarch64-linux-gnu-pkg-config << 'EOF'
          #!/bin/bash
          # This wrapper script helps pkg-config find the right libraries for cross-compilation

          # Get the package name from arguments
          PACKAGE=""
          for arg in "$@"; do
            if [[ "$arg" != --* && "$arg" != -* ]]; then
              PACKAGE="$arg"
              break
            fi
          done

          # Run the actual pkg-config command
          if [ -n "$PACKAGE" ]; then
            # Get the output from the host pkg-config
            OUTPUT=$(pkg-config "$@")
            RESULT=$?

            if [ $RESULT -eq 0 ]; then
              # Replace any absolute paths with cross-compilation paths
              echo "$OUTPUT" | sed 's|-I/usr|-I/usr|g; s|-L/usr|-L/usr|g'
              exit 0
            else
              # If pkg-config fails, provide fallback values for common packages
              case "$PACKAGE" in
                glib-2.0)
                  echo "-I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include -lglib-2.0"
                  exit 0
                  ;;
                cairo)
                  echo "-I/usr/include/cairo -I/usr/include/pixman-1 -lcairo"
                  exit 0
                  ;;
                pango)
                  echo "-I/usr/include/pango-1.0 -lpango-1.0"
                  exit 0
                  ;;
                pangocairo)
                  echo "-I/usr/include/pango-1.0 -I/usr/include/cairo -lpangocairo-1.0 -lpango-1.0 -lcairo"
                  exit 0
                  ;;
                gtk+-3.0)
                  echo "-I/usr/include/gtk-3.0 -I/usr/include/pango-1.0 -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include -I/usr/include/cairo -I/usr/include/pixman-1 -I/usr/include/freetype2 -I/usr/include/libpng16 -lgtk-3 -lgdk-3 -lpangocairo-1.0 -lpango-1.0 -lharfbuzz -latk-1.0 -lcairo-gobject -lcairo -lgdk_pixbuf-2.0 -lgio-2.0 -lgobject-2.0 -lglib-2.0"
                  exit 0
                  ;;
                *)
                  # For other packages, just pass through the failure
                  exit $RESULT
                  ;;
              esac
            fi
          else
            # No package specified, just pass through
            exec pkg-config "$@"
          fi
          EOF
          chmod +x ~/bin/aarch64-linux-gnu-pkg-config
          export PATH=~/bin:$PATH
          export PKG_CONFIG=aarch64-linux-gnu-pkg-config

          # Build with cargo directly
          cargo build --target aarch64-unknown-linux-gnu --release

          # Create dist directory and copy the binary
          mkdir -p ../dist
          cp target/aarch64-unknown-linux-gnu/release/hmi ../dist/hmi-${{ github.event.inputs.version }}-${{ matrix.targetName }}

          # Create a Debian package using cargo-deb
          cargo deb --target aarch64-unknown-linux-gnu --no-build

          # Copy the Debian package to dist
          cp target/aarch64-unknown-linux-gnu/debian/*.deb ../dist/hmi-${{ github.event.inputs.version }}-${{ matrix.targetName }}.deb

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          tag_name: v${{ github.event.inputs.version }}
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image for Debian 12
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          build-args: |
            DEBIAN_VERSION=bookworm
          tags: |
            ghcr.io/${{ github.repository }}/app:latest
            ghcr.io/${{ github.repository }}/app:${{ github.event.inputs.version }}
            ghcr.io/${{ github.repository }}/app:debian12-${{ github.event.inputs.version }}
          platforms: linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
