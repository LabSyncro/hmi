name: "Build and Publish"

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version number for this release"
        required: true
        default: "0.1.0"
      prerelease:
        description: "Is this a prerelease?"
        type: boolean
        default: false

jobs:
  publish-tauri:
    permissions:
      contents: write
      packages: write
    env:
      POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
      POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_MAX_CONNECTIONS: ${{ secrets.POSTGRES_MAX_CONNECTIONS || 5 }}
      VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "ubuntu-22.04"
            args: "--target aarch64-unknown-linux-gnu"
            targetName: "raspberry-pi-debian12"

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-unknown-linux-gnu

      - name: Install cross-compilation tools for Debian 12 Bookworm
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          # Install prerequisites for Docker
          sudo apt-get update
          sudo apt-get install -y qemu qemu-user-static binfmt-support

          # Set up Docker with QEMU for ARM64 emulation
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

          # Verify ARM64 emulation with platform flag
          # This will work in GitHub Actions and handle local development gracefully
          docker run --platform linux/arm64 --rm -t ubuntu:latest uname -m || echo "ARM64 emulation verification failed, but continuing as this may be expected in local development"

          # Create a Dockerfile for the Tauri cross-compilation environment
          cat > Dockerfile.build << EOF
          FROM debian:bookworm-slim

          # Install Rust
          RUN apt-get update && apt-get install -y \
              curl \
              build-essential \
              git \
              pkg-config \
              libssl-dev \
              libwebkit2gtk-4.1-dev \
              libgtk-3-dev \
              libappindicator3-dev \
              librsvg2-dev \
              libxdo-dev \
              file \
              wget \
              unzip \
              python3 \
              && rm -rf /var/lib/apt/lists/*

          # Install Rust
          RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          ENV PATH="/root/.cargo/bin:${PATH}"

          # Install Node.js
          RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - \
              && apt-get install -y nodejs

          # Install Bun
          RUN curl -fsSL https://bun.sh/install | bash
          ENV PATH="/root/.bun/bin:${PATH}"

          # Set working directory
          WORKDIR /app

          # We'll copy the app and build when running the container
          CMD ["/bin/bash"]
          EOF

          # Build the Docker image with platform specification
          docker build --platform linux/arm64 -t tauri-arm64-builder -f Dockerfile.build . || {
            echo "ARM64 Docker build failed, falling back to native architecture build"
            docker build -t tauri-arm64-builder -f Dockerfile.build .
          }

      - name: Install frontend dependencies locally
        run: bun install

      - name: Build frontend
        run: bun run build

      - name: Build and package Tauri App for ARM64 in Docker
        run: |
          # Create a build directory
          mkdir -p build-output

          # Create a simple build script to run in the Docker container
          cat > build-arm64.sh << 'EOF'
          #!/bin/bash
          set -e

          # Install dependencies
          cd /app
          bun install

          # Install Tauri CLI
          bun add -g @tauri-apps/cli

          # Build the Tauri app
          cd src-tauri
          cargo build --release

          # Create output directories for the package
          mkdir -p /app/dist
          mkdir -p /app/debian/DEBIAN /app/debian/usr/bin /app/debian/usr/share/applications /app/debian/usr/share/icons/hicolor/scalable/apps

          # Copy the binary
          cp target/release/app /app/dist/
          cp target/release/app /app/debian/usr/bin/

          # Create a desktop file
          cat > /app/debian/usr/share/applications/app.desktop << EOD
          [Desktop Entry]
          Name=HMI App
          Exec=/usr/bin/app
          Icon=/usr/share/icons/hicolor/scalable/apps/app.svg
          Terminal=false
          Type=Application
          Categories=Utility;
          EOD

          # Copy icon
          if [ -f "icons/icon.svg" ]; then
            cp icons/icon.svg /app/debian/usr/share/icons/hicolor/scalable/apps/app.svg
          fi

          # Create control file
          cat > /app/debian/DEBIAN/control << EOD
          Package: hmi-app
          Version: $VERSION
          Section: utils
          Priority: optional
          Architecture: arm64
          Maintainer: Maintainer <maintainer@example.com>
          Description: HMI Application for Raspberry Pi
           A Tauri application built for Raspberry Pi running Debian 12 (bookworm).
          EOD

          # Build the package
          cd /app
          dpkg-deb --build debian dist/hmi-app-${VERSION}-arm64.deb

          # Set permissions for the output directory
          chmod -R 777 /app/dist
          EOF

          # Make the build script executable
          chmod +x build-arm64.sh

          # Run the Docker container to build the app with platform specification
          docker run --platform linux/arm64 --rm -v $(pwd):/app -e VERSION=${{ github.event.inputs.version }} tauri-arm64-builder /app/build-arm64.sh || {
            echo "ARM64 Docker run failed, falling back to native architecture. This might not produce ARM64 binaries."
            docker run --rm -v $(pwd):/app -e VERSION=${{ github.event.inputs.version }} tauri-arm64-builder /app/build-arm64.sh
          }

          # Create our distribution directory
          mkdir -p dist
          cp -r build-output/* dist/ 2>/dev/null || echo "No files in build-output/"
          cp -r src-tauri/target/release/app dist/app-${{ github.event.inputs.version }}-${{ matrix.targetName }} 2>/dev/null || echo "No binary found"

          # Use the debian package from the Docker build
          if [ -f "dist/hmi-app-${{ github.event.inputs.version }}-arm64.deb" ]; then
            cp dist/hmi-app-${{ github.event.inputs.version }}-arm64.deb dist/app-${{ github.event.inputs.version }}-${{ matrix.targetName }}.deb
          fi

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          tag_name: v${{ github.event.inputs.version }}
          name: App v${{ github.event.inputs.version }} for Debian 12
          body: |
            Release for Raspberry Pi devices running Debian 12 (Bookworm).
            Download and install the package for your Raspberry Pi.
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Prepare Docker image build
        run: |
          # Create a minimal Docker context
          mkdir -p docker-build

          # Copy the binary and other assets
          cp dist/app-${{ github.event.inputs.version }}-${{ matrix.targetName }} docker-build/app
          cp -r dist docker-build/

          # Copy our existing Dockerfile but modify it to use the pre-built binary
          cp Dockerfile docker-build/

          # Modify the Dockerfile to use our pre-built binary instead of building it
          sed -i 's/COPY --from=builder \/app\/src-tauri\/target\/release\/app/COPY app/' docker-build/Dockerfile

          # Remove the build stage from the Dockerfile since we don't need it
          awk 'BEGIN{p=0} /^# Stage 2/{p=1} {if(p==1)print}' Dockerfile > docker-build/Dockerfile.tmp

          # Add VERSION environment variable
          echo "ENV APP_VERSION=${{ github.event.inputs.version }}" >> docker-build/Dockerfile.tmp

          # Replace the original file
          mv docker-build/Dockerfile.tmp docker-build/Dockerfile

      - name: Build and push Docker image for Debian 12
        uses: docker/build-push-action@v5
        with:
          context: docker-build
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/app:latest
            ghcr.io/${{ github.repository }}/app:${{ github.event.inputs.version }}
            ghcr.io/${{ github.repository }}/app:debian12-${{ github.event.inputs.version }}
          platforms: linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
