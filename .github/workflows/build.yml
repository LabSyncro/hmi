name: "Build and Publish"

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version number for this release"
        required: true
        default: "0.1.0"
      prerelease:
        description: "Is this a prerelease?"
        type: boolean
        default: false

jobs:
  publish-tauri:
    permissions:
      contents: write
      packages: write
    env:
      POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
      POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_MAX_CONNECTIONS: ${{ secrets.POSTGRES_MAX_CONNECTIONS || 5 }}
      VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "ubuntu-22.04"
            targetName: "raspberry-pi-debian12"

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static
          sudo apt-get install -y build-essential curl wget file
          sudo apt-get install -y patchelf

      - name: Install frontend dependencies
        run: bun install

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Tauri App for ARM64 using cross-compilation container
        run: |
          # Create a Dockerfile for cross-compilation
          cat > Dockerfile.cross << EOF
          FROM rust:slim-bookworm

          # Install dependencies
          RUN apt-get update && apt-get install -y \
              build-essential \
              curl \
              wget \
              file \
              unzip \
              libwebkit2gtk-4.1-dev \
              libssl-dev \
              libgtk-3-dev \
              libayatana-appindicator3-dev \
              librsvg2-dev \
              patchelf \
              pkg-config \
              nodejs \
              npm

          # Install Rust target
          RUN rustup target add aarch64-unknown-linux-gnu

          # Install cross-compilation tools
          RUN apt-get install -y \
              gcc-aarch64-linux-gnu \
              g++-aarch64-linux-gnu \
              libc6-dev-arm64-cross

          # Add ARM64 architecture and install ARM64 libraries
          RUN dpkg --add-architecture arm64 && \
              apt-get update && \
              apt-get install -y \
              libwebkit2gtk-4.1-dev:arm64 \
              libssl-dev:arm64 \
              libgtk-3-dev:arm64 \
              libayatana-appindicator3-dev:arm64 \
              librsvg2-dev:arm64

          # Set up cargo config
          RUN mkdir -p /root/.cargo && \
              echo '[target.aarch64-unknown-linux-gnu]' > /root/.cargo/config && \
              echo 'linker = "aarch64-linux-gnu-gcc"' >> /root/.cargo/config && \
              echo 'rustflags = ["-C", "link-arg=-march=armv8-a"]' >> /root/.cargo/config && \
              echo '' >> /root/.cargo/config && \
              echo '[env]' >> /root/.cargo/config && \
              echo 'PKG_CONFIG_ALLOW_CROSS = "1"' >> /root/.cargo/config && \
              echo 'PKG_CONFIG_PATH = "/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig"' >> /root/.cargo/config && \
              echo 'PKG_CONFIG_SYSROOT_DIR = "/"' >> /root/.cargo/config

          # Install bun
          RUN curl -fsSL https://bun.sh/install | bash

          # Set environment variables
          ENV PATH="/root/.bun/bin:${PATH}"
          ENV PKG_CONFIG_ALLOW_CROSS=1
          ENV PKG_CONFIG_PATH="/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig"
          ENV PKG_CONFIG_SYSROOT_DIR="/"
          ENV RUSTFLAGS="-C link-arg=-march=armv8-a"

          # Set up working directory
          WORKDIR /app
          EOF

          # Build the cross-compilation container
          docker build -t tauri-cross-arm64 -f Dockerfile.cross .

          # Install Tauri CLI in the project
          bun add --dev @tauri-apps/cli

          # Run the build in the container
          docker run --rm -v $(pwd):/app tauri-cross-arm64 bash -c "
            cd /app &&
            export PATH=/root/.bun/bin:\$PATH &&
            export PKG_CONFIG_ALLOW_CROSS=1 &&
            export PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig &&
            export PKG_CONFIG_SYSROOT_DIR=/ &&
            export RUSTFLAGS='-C link-arg=-march=armv8-a' &&
            bun install &&
            bun tauri build --target aarch64-unknown-linux-gnu
          "

          # Create dist directory
          mkdir -p dist

          # Copy the built packages
          cp src-tauri/target/aarch64-unknown-linux-gnu/release/bundle/deb/*.deb dist/app-${{ github.event.inputs.version }}-${{ matrix.targetName }}.deb
          if [ -d "src-tauri/target/aarch64-unknown-linux-gnu/release/bundle/appimage" ]; then
            cp src-tauri/target/aarch64-unknown-linux-gnu/release/bundle/appimage/*.AppImage dist/app-${{ github.event.inputs.version }}-${{ matrix.targetName }}.AppImage
          fi

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          tag_name: v${{ github.event.inputs.version }}
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image for Debian 12
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          build-args: |
            DEBIAN_VERSION=bookworm
          tags: |
            ghcr.io/${{ github.repository }}/app:latest
            ghcr.io/${{ github.repository }}/app:${{ github.event.inputs.version }}
            ghcr.io/${{ github.repository }}/app:debian12-${{ github.event.inputs.version }}
          platforms: linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
