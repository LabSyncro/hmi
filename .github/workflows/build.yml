name: "Build and Publish"

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version number for this release"
        required: true
        default: "0.1.0"
      prerelease:
        description: "Is this a prerelease?"
        type: boolean
        default: false

jobs:
  publish-tauri:
    permissions:
      contents: write
      packages: write
    env:
      POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
      POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_MAX_CONNECTIONS: ${{ secrets.POSTGRES_MAX_CONNECTIONS || 5 }}
      VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "ubuntu-22.04"
            targetName: "raspberry-pi-debian12"

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static
          sudo apt-get install -y build-essential curl wget file
          sudo apt-get install -y patchelf
          sudo apt-get install -y dpkg-dev

      - name: Install frontend dependencies
        run: bun install

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Tauri CLI
        run: bun add --dev @tauri-apps/cli

      - name: Set up cross-compilation environment
        run: |
          # Install cross-compilation tools
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

          # Set up Cargo config for cross-compilation
          mkdir -p ~/.cargo
          cat > ~/.cargo/config.toml << EOF
          [target.aarch64-unknown-linux-gnu]
          linker = "aarch64-linux-gnu-gcc"
          rustflags = ["-C", "link-arg=-march=armv8-a"]
          EOF

          # Install Rust target
          rustup target add aarch64-unknown-linux-gnu

      - name: Create custom Docker image for cross-compilation
        run: |
          # Create a Dockerfile for cross-compilation
          cat > Dockerfile.cross << EOF
          FROM ghcr.io/cross-rs/aarch64-unknown-linux-gnu:latest

          # Install required dependencies for Tauri and glib
          RUN apt-get update && apt-get install -y \
              libglib2.0-dev \
              libgtk-3-dev \
              libwebkit2gtk-4.1-dev \
              libayatana-appindicator3-dev \
              libssl-dev \
              pkg-config

          # Install ARM64 cross-compilation libraries
          RUN dpkg --add-architecture arm64 && \
              apt-get update || true

          # Try to install ARM64 libraries if available
          RUN apt-get install -y libglib2.0-dev:arm64 || echo "Could not install ARM64 libraries, continuing anyway"

          # Set environment variables for cross-compilation
          ENV PKG_CONFIG_ALLOW_CROSS=1
          ENV PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig
          ENV PKG_CONFIG_SYSROOT_DIR=/
          EOF

          # Build the Docker image
          docker build -t tauri-cross-arm64 -f Dockerfile.cross .

          # Install cross tool for Rust cross-compilation
          cargo install cross

          # Create a Cross.toml configuration file
          cat > Cross.toml << EOF
          [target.aarch64-unknown-linux-gnu]
          image = "tauri-cross-arm64"

          [build.env]
          passthrough = [
            "POSTGRES_HOST",
            "POSTGRES_PORT",
            "POSTGRES_USER",
            "POSTGRES_PASSWORD",
            "POSTGRES_DB",
            "POSTGRES_MAX_CONNECTIONS",
            "VITE_API_BASE_URL",
            "PKG_CONFIG_ALLOW_CROSS",
            "PKG_CONFIG_PATH",
            "PKG_CONFIG_SYSROOT_DIR"
          ]
          EOF

      - name: Build Tauri App for ARM64
        run: |
          # Set environment variables for cross-compilation
          export PKG_CONFIG_ALLOW_CROSS=1
          export PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig
          export PKG_CONFIG_SYSROOT_DIR=/

          # Build the frontend
          bun run build

          # Use cross to build the Tauri app for ARM64
          cd src-tauri

          # Create a custom build script for glib-sys
          mkdir -p .cargo
          cat > .cargo/config.toml << EOF
          [env]
          GLIB_SYS_NO_PKG_CONFIG = "1"
          GOBJECT_SYS_NO_PKG_CONFIG = "1"
          GIO_SYS_NO_PKG_CONFIG = "1"
          GLIB_STATIC = "1"
          GTK_STATIC = "1"
          EOF

          # Build with cross
          cross build --target aarch64-unknown-linux-gnu --release

          # Create dist directory and copy the binary
          mkdir -p ../dist
          cp target/aarch64-unknown-linux-gnu/release/hmi ../dist/hmi-${{ github.event.inputs.version }}-${{ matrix.targetName }}

          # Create a simple Debian package structure
          mkdir -p deb-package/DEBIAN
          mkdir -p deb-package/usr/local/bin

          # Create control file
          cat > deb-package/DEBIAN/control << EOF
          Package: hmi
          Version: ${{ github.event.inputs.version }}
          Section: utils
          Priority: optional
          Architecture: arm64
          Maintainer: HMI Team
          Description: HMI Application for Raspberry Pi
           This package provides the HMI application for Raspberry Pi devices.
          EOF

          # Copy binary to package
          cp target/aarch64-unknown-linux-gnu/release/hmi deb-package/usr/local/bin/

          # Build the Debian package
          dpkg-deb --build deb-package
          mv deb-package.deb ../dist/hmi-${{ github.event.inputs.version }}-${{ matrix.targetName }}.deb

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          tag_name: v${{ github.event.inputs.version }}
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image for Debian 12
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          build-args: |
            DEBIAN_VERSION=bookworm
          tags: |
            ghcr.io/${{ github.repository }}/app:latest
            ghcr.io/${{ github.repository }}/app:${{ github.event.inputs.version }}
            ghcr.io/${{ github.repository }}/app:debian12-${{ github.event.inputs.version }}
          platforms: linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
